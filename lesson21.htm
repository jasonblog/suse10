<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>柏青哥的 SuSE Linux -- 架設簡易的防火牆</title>
<style type="text/css">
<!--
a {
	color: #000099;
	text-decoration: none;
}
-->
</style>
</head>

<body background="../sumtextb.jpg" tppabs="http://www.suse.url.tw/sumtextb.jpg" link="#000099" vlink="#000099" alink="#000099" leftmargin="40">
<a href="index-1.htm" tppabs="http://www.suse.url.tw/sles10/index.htm" target="_blank"><img src="../first.GIF" tppabs="http://www.suse.url.tw/first.GIF" width="40" height="40" border="0" align="middle"></a>　　 
作者：陳柏菁<font size="+1">　</font>E-mail：pachingko@ms96.url.com.tw 
<table width="100%" border="0">
  <tr> 
    <td nowrap> <div align="left"></div>
      <div align="center"> 
        <div align="center"><font size="+1"><font size="7"><strong>第二十一章　架 設 
          簡 易 防 火 牆</strong></font></font></div>
        <font color="#0000FF" size="+1"><strong></strong></font></div>
      <div align="center"></div></td>
  </tr>
</table>
<font color="#660066"><br>
<font color="#000099" size="+1"><strong>索引：</strong></font><br>
</font>
<table width="100%" border="0">
  <tr> 
    <td colspan="3"><font color="#000099"><strong>21.1 <a href="#1">防火牆概述</a></strong></font></td>
  </tr>
  <tr> 
    <td width="4%"><font color="#000099">&nbsp;</font></td>
    <td width="6%" align="center" valign="top" nowrap><font color="#000099">21.1.1</font></td>
    <td width="90%"><font color="#000099"><a href="#2">防火牆簡介</a></font></td>
  </tr>
  <tr> 
    <td><font color="#000099">&nbsp;</font></td>
    <td align="center" valign="top" nowrap><font color="#000099">21.1.2</font></td>
    <td><font color="#000099"><a href="#3">DMZ 概念</a></font></td>
  </tr>
  <tr> 
    <td colspan="3"><font color="#000099"><strong>21.2 <a href="#4">學習 iptables</a></strong></font></td>
  </tr>
  <tr> 
    <td><font color="#000099">&nbsp;</font></td>
    <td align="center" valign="top" nowrap><font color="#000099">21.2.1</font></td>
    <td><font color="#000099"><a href="#5">基本觀念</a> (<a href="#6">socket</a>、<a href="#7">NAT</a>)</font></td>
  </tr>
  <tr> 
    <td><font color="#000099">&nbsp;</font></td>
    <td align="center" valign="top" nowrap><font color="#000099">21.2.2</font></td>
    <td><font color="#000099"><a href="#8">iptables 的處理流程</a></font></td>
  </tr>
  <tr> 
    <td><font color="#000099">&nbsp;</font></td>
    <td align="center" valign="top" nowrap><font color="#000099">21.2.3</font></td>
    <td><font color="#000099"><a href="#9">防火牆設定處及相關模組</a></font></td>
  </tr>
  <tr> 
    <td colspan="3"><font color="#000099"><strong>21.3 <a href="#10">使用 iptables 
      建構防火牆</a></strong></font></td>
  </tr>
  <tr> 
    <td><font color="#000099">&nbsp;</font></td>
    <td align="center" valign="top" nowrap><font color="#000099">21.3.1</font></td>
    <td><font color="#000099"><a href="#11">清除所有規則</a></font></td>
  </tr>
  <tr> 
    <td><font color="#000099">&nbsp;</font></td>
    <td align="center" valign="top" nowrap><font color="#000099">21.3.2</font></td>
    <td><font color="#000099"><a href="#12">定義防火牆政策</a></font></td>
  </tr>
  <tr> 
    <td><font color="#000099">&nbsp;</font></td>
    <td align="center" valign="top" nowrap><font color="#000099">21.3.3</font></td>
    <td><font color="#000099"><a href="#13">設定防火牆規則</a></font></td>
  </tr>
  <tr> 
    <td colspan="3"><font color="#000099"><strong>21.4 <a href="#14">綜合範例</a></strong></font></td>
  </tr>
</table>
<br>
<hr>
<p><font color="#660066"><br>
  </font> <strong><font color="#0000FF" size="+1"><a name="1"></a><font size="6">21.1 
  防火牆概述</font></font><br>
  </strong><br>
  　本章對初學者而言，應該是比較具有難度的一章，因為您要對網路的相關知識有一定程度的了解，尤其是 TCP/IP 這部分。另外清晰的邏輯思考能力也是必要的，不過這可以透過不斷的實際演練，來加深並加強這方面的觀念。<br>
  <br>
  　 以下我們會從最基礎的防火牆介紹開始，慢慢引領讀者完成一個基本的 Firewall 配置。<br>
  <br>
  <font size="+1"><strong><a name="2"></a><font size="5">21.1.1 防火牆簡介</font></strong></font><br>
  <br>
  　如您曾經在公司內部擔任網路管理方面的職務，應該很清楚知道網路安全的重要性，因為一個不小心，都有可能造成公司的機密資料外流或者遭竄改，嚴重一點的還會造成整個內部電腦癱瘓掉。所以為了增加我們主機的安全性，就有必要來架設防火牆，作為保護本機或者是內部主機的第一道防線。<br>
  <br>
  　以防火牆的運作方式來分類，大抵上可區分為 Filter Firewall 及 Application Firewall。Filter Firewall 
  為封包過濾式的防火牆，就是針對來源封包的 header 進行分析比對的動作，如果比對結果符合我們所設定的過濾規則，則必須進行進一步的處理，看是要放行、丟棄、拒絕、或者進行具 
  NAT 功能的 IP 偽裝及執行 socket 替代等等，完全視您如何做設定，而今天要介紹的 iptables 就是屬於 Filter Firewall。至於 
  Application Firewall 最典型的代表就是 Proxy。Proxy 即所謂的代理伺服器，也就是當 Client 端有所需求 (一般為 http 
  的請求) 時，會由 Proxy 幫 Client 至 Internet 取回所需資料，然後再回應給 Client 端，因此對 Client 而言是比較安全的。 
</p>
<p>　相信大家應該也聽說過硬體防火牆及軟體防火牆，這兩者有什麼差別呢 ? 先來說說硬體防火牆好了，此種防火牆是使用專門的硬體來負責執行工作，而由於這個硬體裝置就是專門用來建構防火牆用的，因此可以讓硬體裝置與作業系統之間達最佳化，以提昇其整體的執行效能。至於軟體防火牆，則是在目前所使用的作業系統之中，再去額外的安裝防火牆軟體，因此其執行效能會受到系統中其他程序的影響，不過話雖如此，卻也提供較高的使用彈性。<br>
  <br>
  　在維護主機安全時，除了可用 Firewall 做第一道防線外，還可配合 TCP_Wrappers 做第二道防線，最後就是藉由各項服務中設定檔的設定來做控管，而在通過這些層層關卡後，最後封包才得以順利進入主機。如以下的簡圖所示：</p>
<p align="center"> <img src="../picture/fire.gif" tppabs="http://www.suse.url.tw/picture/fire.gif" width="622" height="84"><br>
  <font size="2">圖一：主機安全機制簡圖</font></p>
<p> <font size="+1"><strong><a name="3"></a><font size="5">21.1.2 DMZ 概念</font></strong></font><br>
  <br>
  　在防火牆架構中，常常會看到 DMZ 這個名詞，其為 <strong>D</strong>e-<strong>M</strong>ilitarized 
  <strong>Z</strong>one 的簡寫，也就是所謂的非軍事區。我們都知道防火牆主要就是在 Internet 與企業內部網路之間建構一道屏障，來保護企業內部主機的安全 
  ; 而多建構一個非軍事區出來，主要是為了把企業內部網路與提供服務的伺服器再做個區隔，意即把提供給 Internet 公開存取的伺服器安置在 DMZ，而不是跟 
  Client 放在同一個網段，因此擔任防火牆任務的主機一般都會有三個介面，分別連接 Internet、DMZ 與 企業內部網路，可參考以下簡單的架構圖：</p>
<p align="center"> <img src="../picture/firewall.png" tppabs="http://www.suse.url.tw/picture/firewall.png" width="296" height="181"> 
  <br>
  <font size="2">圖二：簡易的 DMZ 架構圖</font></p>
<p> 　至於將內部網路與伺服器分別獨立開來的主要目的為：</p>
<table width="100%" border="0">
  <tr> 
    <td width="2%">&nbsp;</td>
    <td width="3%" align="center"><img src="../picture/icon.jpg" tppabs="http://www.suse.url.tw/picture/icon.jpg" width="11" height="11"></td>
    <td width="95%"><strong><font color="#000099">保護內部電腦的安全</font></strong></td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>由於企業所提供的網路服務，通常都是允許外界的直接存取，是完全公開的，因此如果將 Server 與內部電腦放置在同一個網段時，萬一哪天某台 Server 
      被入侵後，則很有可能會藉由這台被攻擊的主機，進而危及到其他內部電腦的安全，此時您公司內部的重要資料，將會面臨重大的威脅。</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center"><img src="../picture/icon.jpg" tppabs="http://www.suse.url.tw/picture/icon.jpg" width="11" height="11"></td>
    <td><strong><font color="#000099">維持網路正常運作</font></strong></td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>將 Server 與內部電腦安置於同網段時，如果提供給外部存取的 Server，平常有很高的流量，那麼恐會影響到內部電腦的正常運作。</td>
  </tr>
</table>
<p><strong><font color="#0000FF" size="+1"><a name="4"></a><font size="6">21.2 
  學習 iptables</font></font></strong><br>
  <br>
  　在 Linux 2.2 的核心，是使用 ipchains 程式來建構 Firewall，但是到了 linux 2.4 核心時，則是使用 iptables，不過在 
  2.4 核心上，還是可以透過模組載入的方式來使用 ipchains，只不過要注意 ipchains 及 iptables 不能同時啟用，只能使用其中的一種。<br>
  <br>
  <font size="+1"><strong><a name="5"></a><font size="5">21.2.1</font></strong></font> 
  <font size="5"><strong><font color="#000000">基本觀念</font></strong></font><br>
  <font color="#000000"><strong><br>
  </strong>　這裡會先談談 socket 的概念，再來會接著說明 NAT 的基本原理，等您都熟悉了這些觀念後，對將來 iptables 的使用上會有很大的幫助。<strong><br>
  <br>
  <a name="6"></a><img src="../picture/1775.gif" tppabs="http://www.suse.url.tw/picture/1775.gif" width="18" height="18"><font size="+1"> 
  socket 概念<br>
  <br>
  </font></strong>　所謂的 socket，就是一個 IP 位址加上一個 TCP/UDP port。當兩台電腦連線時，來源端所傳送給目的端的封包中，就包含了 
  source port、source address、destination port、destination address，而一般我們所謂的 source 
  socket，就是指來源 IP 位址及來源 port，destination socket 就是指目的 IP 位址及目的 port，所以簡單的說，兩個節點間的連線就是 
  socket 間的連線，而 source socket 及 destination socket 則合稱為 socket pair。<font size="+1"><strong> 
  </strong></font></font></p>
<p> <strong><a name="7"></a><font color="#000000"><img src="../picture/1775.gif" tppabs="http://www.suse.url.tw/picture/1775.gif" width="18" height="18"><font size="+1"> 
  </font></font></strong> <strong><font size="+1">NAT 的原理<br>
  <br>
  </font></strong>　NAT 就是 Network Address Transfer 的縮寫，主要功用就是將 source socket 或 
  destination socket 做替代。利用 NAT，我們可以針對來源封包的 IP 位址或 port 來做轉換，當然也可以對目的封包的 IP 位址或 
  port 來做轉換，所以 NAT 實際上就是一種 socket 的替換機制。當 NAT 主機在對 source socket 做替代時，稱之為 SNAT，那對 
  destination socket 做替代時，就叫做 DNAT。這些觀念待會都會使用到，請各位務必熟悉。<br>
  <br>
  　像平常企業內部的電腦都是使用 Private Address 居多，那為何這些電腦可以連線出去 internet 呢 ? 原來是利用 source socket 
  替代的方式 (典型的 SNAT)，所以接著底下會以一個流程圖，來跟各位說明在 NAT 後方的 Client 如何連上 internet：</p>
<p align="center"> <img src="../picture/firewall2.png" tppabs="http://www.suse.url.tw/picture/firewall2.png" width="479" height="189"><br>
  <font size="2">圖三：NAT 運作流程圖</font></p>
<table width="100%" border="0">
  <tr> 
    <td width="2%">&nbsp;</td>
    <td width="3%" align="center"><img src="../picture/icon.jpg" tppabs="http://www.suse.url.tw/picture/icon.jpg" width="11" height="11"></td>
    <td width="95%"><strong><font color="#000099">Client → NAT</font></strong></td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>首先 NAT 主機接收 Client 端所送來的封包，其封包內所記載的目的 IP 位址，為欲瀏覽的那個 Web Server 的位址 202.43.195.52，那目的 
      port 自然就是 80 port﹔至於 source socket 為 192.168.1.1 及 3000 port (隨機產生大於 1024 
      的 port)。</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center"><img src="../picture/icon.jpg" tppabs="http://www.suse.url.tw/picture/icon.jpg" width="11" height="11"></td>
    <td><strong><font color="#000099">NAT → Web Server</font></strong></td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>接著 NAT 主機會把 source socket 做個替換，尤其是 source address，因 private address 與 
      public address 是無法直接通訊的，所以此時 NAT 需將 192.168.1.1 的來源位址，替換成本身對外的 public address 
      : 61.221.37.231。至於 source port 是否替代，則看 NAT 主機本身，當然最好是盡量保持原來的 port，但萬一這個 
      port 已經被用掉了，那只好另外使用一個 port，而以我們這個例子來說，就是將 source socket 都替換掉。當 NAT 將 source 
      socket 順利改寫後，會將此連線紀錄存放在 NAT Table 中。</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center"><img src="../picture/icon.jpg" tppabs="http://www.suse.url.tw/picture/icon.jpg" width="11" height="11"></td>
    <td><strong><font color="#000099">Web Server → NAT</font></strong></td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>在 Web Server 收到這個封包時，會以為是 NAT 主機欲與其做連線，所以回應封包裡的 Destination socket 為 NAT 
      主機的位址 61.221.37.231 及 5000 port。</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center"><img src="../picture/icon.jpg" tppabs="http://www.suse.url.tw/picture/icon.jpg" width="11" height="11"></td>
    <td><strong><font color="#000099">NAT → Client</font></strong></td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>NAT 收到了這個回應封包後，再根據剛剛 NAT Table 的連線記錄，而順利將封包回應給 Client 端。</td>
  </tr>
</table>
<br>
　以上就是 SNAT 的一個基本原理，沒問題的話，那 DNAT 也差不了多少，請自己思考看看囉。 
<p><strong><font color="#000000" size="+1"><a name="8"></a><font size="5">21.2.2 
  </font></font></strong><font color="#000000" size="5"><strong> iptables </strong></font><font color="#0000FF" size="5"><strong><font color="#000000">的處理流程</font></strong></font><font color="#0000FF" size="+1"><strong><br>
  </strong></font><br>
  　iptables 是屬於封包過濾式的防火牆，主要是針對封包的 header 來進行過濾條件的設定，如果封包比對結果符合我們所設定的規則 (rules)，則進行進一步的處理。<br>
  <br>
  　在 iptables 裡，常使用的兩個 table 為 filter table 及 nat table (這裡我們不談比較進階的 mangle table)，而每個 
  table 都會有幾個內建的防火鏈 ( Built-in Chains )，當封包進來時，就會將其放進不同的 chain 中去做規則比對。緊接著就來看看這兩個 
  table 各有哪些 chain 可以使用：</p>
<table width="71%" border="1" align="center" cellspacing="0" bordercolor="#666666">
  <tr> 
    <td width="11%" nowrap bgcolor="#666666"> 
      <div align="center"><font color="#FFFFFF"><strong><font size="+1">Table</font></strong></font></div></td>
    <td width="15%" nowrap bgcolor="#666666"> 
      <div align="center"><font color="#FFFFFF"><strong><font size="+1">chain</font></strong></font></div></td>
    <td width="74%" nowrap bgcolor="#666666"> 
      <div align="center"><font color="#FFFFFF"><strong>封包被處理時機</strong></font></div></td>
  </tr>
  <tr> 
    <td rowspan="3" nowrap> 
      <div align="center"><font color="#000000"><strong><font size="+1">filter</font><br>
        (預設)</strong></font></div></td>
    <td height="20" nowrap> 
      <div align="center"><font color="#000000">INPUT </font></div></td>
    <td nowrap><font color="#000000">從一介面進入的封包，其目的是本機。</font></td>
  </tr>
  <tr> 
    <td nowrap> 
      <div align="center"><font color="#000000">OUTPUT</font></div></td>
    <td nowrap><font color="#000000">從本機所產生的封包，此封包是要出介面的。</font></td>
  </tr>
  <tr> 
    <td nowrap> 
      <div align="center"><font color="#000000">FORWARD</font></div></td>
    <td nowrap><font color="#000000">封包非本機產生，且其目的也非本機者。</font></td>
  </tr>
  <tr> 
    <td rowspan="3" nowrap> 
      <div align="center"><font color="#000000"><strong><font size="+1">nat</font></strong></font></div></td>
    <td nowrap> 
      <div align="center"><font color="#000000">PREROUTING</font></div></td>
    <td nowrap><font color="#000000">封包進入介面後、路由前。此類封包可以進行 DNAT 的處理。</font></td>
  </tr>
  <tr> 
    <td nowrap> 
      <div align="center"><font color="#000000">POSTROUTING</font></div></td>
    <td nowrap><font color="#000000">封包路由後、出介面前。此類封包可以進行 SNAT 的處理。</font></td>
  </tr>
  <tr> 
    <td nowrap> 
      <div align="center"><font color="#000000">OUTPUT</font></div></td>
    <td nowrap><font color="#000000">從本機產生的封包，此封包是要出介面的。</font></td>
  </tr>
</table>
<p>　接著以一個簡圖來說明封包過濾的流程概況：</p>
<p align="center"> <img src="../picture/fire2.gif" tppabs="http://www.suse.url.tw/picture/fire2.gif" width="456" height="317"><br>
  <font size="2">圖四：封包過濾流程圖</font></p>
<p> 　假設以上這些 chains 我們都有做相關的規則設定，則當封包進入時，會先經過 PREROUTING chain，接著有兩種選擇：</p>
<table width="100%" border="0">
  <tr>
    <td width="2%" align="center" valign="top">&nbsp;</td>
    <td width="3%" align="center" valign="top">1.</td>
    <td width="95%">若封包的目的地是本機，則在經過 Routing Table 後，會走 INPUT chain 進入 Local Process。<br>
      <table width="30%" border="0" bgcolor="#CCCCCC">
        <tr>
          <td nowrap><font color="#000000"><strong>PREROUTING chain → INPUT chain</strong></font> 
          </td>
        </tr>
      </table> 
    </td>
  </tr>
  <tr>
    <td align="center" valign="top">&nbsp;</td>
    <td align="center" valign="top">2.</td>
    <td>若封包的目的非本機，則在經過 Routing Table 後，會走 FORWARD chain，最後再經由 POSTROUTING chain 
      出去。<br>
      <table width="30%" border="0" bgcolor="#CCCCCC">
        <tr> 
          <td nowrap><font color="#000000"><strong>PREROUTING chain → FORWARD 
            chain → POSTROUTING chain </strong></font></td>
        </tr>
      </table>
      
    </td>
  </tr>
</table>
<br>
　或許各位已注意到在 nat table 及 filter table 裡都有 OUTPUT chain，那從本機所產生的封包要出去介面時會怎麼走呢 ? 這時候會先經 
nat table 的 OUTPUT chain，再來才是 filter table 的 OUTPUT chain，而在經過 Routing Table 後，就由 
POSTROUTING chain 出去。<br>
<table width="30%" border="0" bgcolor="#CCCCCC">
  <tr> 
    <td nowrap><font color="#FF0000"><strong><font color="#000000">nat OUTPUT 
      chain → filter OUTPUT chain → nat POSTROUTING chain</font></strong></font><font color="#000000"><strong></strong></font></td>
  </tr>
</table>
<br>
<br>
<strong><font color="#000000" size="+1"><a name="9"></a><font size="5">21.2.3 
</font></font></strong><font color="#000000" size="5"><strong>防火牆的設定處</strong></font><font size="5"><strong>與相關模組</strong></font><br>
<br>
　在學習架設防火牆之前，您需先了解這些防火牆的規則要設定在哪裡，還有就是與防火牆相關的模組有哪些 ? 一般我們習慣將防火牆設定在 /etc/init.d/boot.local 
之中，因為系統在開機過程執行完一些相關的 init scripts 之後，就會去執行這個 boot.local script，所以將防火牆規則寫在這裡後，下次開機時就會自動啟動防火牆功能。當然您也可以事先將這些防火牆規則寫在某一個 
script 檔案內，比如 /root/firewall.sh，然後再把 /root/firewall.sh 放進 boot.local 中就行了。當設定完成後，要馬上啟用防火牆，就直接執行此 
script：<br>
<br>
<table width="100%" border="0" bgcolor="#000000">
  <tr>
    <td height="25"><font color="#FFFFFF">suse:~ #<strong><font color="#FFFF00"> 
      /etc/init.d/boot.local</font></strong></font></td>
  </tr>
</table>
<br>
　這裡有個地方要注意，如果系統預設的防火牆是啟動的，而您現在又將防火牆規則設定在 boot.local 中，則在下次開機時，是會以預設的防火牆為主的。<br>
<br>
　在您尚未設定 Firewall 以前，可先使用以下的指令檢查看看目前啟動 Firewall 沒：<br>
<br>
<table width="100%" border="0" bgcolor="#000000">
  <tr> 
    <td height="25"><font color="#FFFFFF">suse:~ #<strong> <font color="#FFFF00">iptables-save</font></strong></font></td>
  </tr>
</table>
<br>
　如果此時在螢幕上出現好幾頁 Firewall 規則的話，表示防火牆預設是啟動的。欲關掉目前的 Firewall 可執行：<br>
<br>
<table width="100%" border="0" bgcolor="#000000">
  <tr> 
    <td height="25"><font color="#FFFFFF">suse:~ #<strong> <font color="#FFFF00">rcSuSEfirewall2 
      stop</font></strong></font></td>
  </tr>
</table>
<p> 　另外也可利用 YaST2 來停止 Firewall 及讓系統在下次開機時，不啟動預設的 Firewall：</p>
<p align="center"><img src="../picture/firewall4.png" tppabs="http://www.suse.url.tw/picture/firewall4.png" width="783" height="220"><br>
  <font size="2">圖五：YaST2 控制中心畫面</font></p>
<p align="center"><img src="../picture/firewall5.png" tppabs="http://www.suse.url.tw/picture/firewall5.png" width="783" height="506"><br>
  <font size="2">圖六：防火牆組態調整畫面</font></p>
<p align="center"><img src="../picture/firewall6.png" tppabs="http://www.suse.url.tw/picture/firewall6.png" width="783" height="501"><br>
  <font size="2">圖七：防火牆組態摘要畫面</font></p>
<p> 　完成後，您就可以很安心的去自行設定防火牆，且 reboot 後，還是會套用您目前所設定的防火牆規則噢。<br>
  <br>
  　最後提一下 iptables 相關的模組，不論您是使用 YaST 的方式或者設定在 boot.local 中都一樣，只要 Firewall 被啟動後需使用到的模組，核心都會自動幫您載入。這裡只列出一部分相關模組給各位參考：</p>
<table width="72%" border="1" cellspacing="0">
  <tr bgcolor="#CCCCCC"> 
    <td width="19%" nowrap><font color="#000099">ip_tables</font></td>
    <td width="17%" nowrap><font color="#000099">iptable_nat</font></td>
    <td width="15%" nowrap><font color="#000099">ip_nat_irc</font></td>
    <td width="23%" nowrap><font color="#000099">ip_conntrack_ftp</font></td>
    <td width="26%" nowrap><font color="#000099">ip_conntrack</font></td>
  </tr>
  <tr bgcolor="#CCCCCC"> 
    <td nowrap><font color="#000099">iptable_filter</font></td>
    <td nowrap><font color="#000099">ip_nat</font></td>
    <td nowrap><font color="#000099">ip_nat_ftp</font></td>
    <td nowrap><font color="#000099">ip_conntrack_irc </font></td>
    <td nowrap><font color="#000099">ipt_MASQUERADE</font></td>
  </tr>
</table>
<br>
　比較要留意的是 ip_conntrack_ftp 及 ip_nat_ftp 這兩個模組。當在 NAT 主機後端的 Client，是使用 Active mode 
來連線至外部的 FTP 站台下載資料，或您本身所架設的 FTP Server 是在 NAT 內部的話，那這兩個模組就非常的好用。透過這兩個模組的載入，將可輕易的解決一些 
FTP 連線的問題噢。<br>
<br>
<strong><font color="#0000FF" size="+1"><a name="10"></a><font size="6">21.3 
</font></font></strong><font color="#0000FF" size="6"><strong>使用 iptables 建構防火牆</strong></font><br>
<br>
　在設定 iptables 時，可參考以下的步驟依序做設定：<br>
<br>
<table width="100%" border="0">
  <tr> 
    <td width="2%">&nbsp;</td>
    <td width="3%" align="center"><img src="../picture/icon.jpg" tppabs="http://www.suse.url.tw/picture/icon.jpg" width="11" height="11"></td>
    <td width="95%"><strong><font color="#000099">清除所有規則</font></strong></td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>如果系統有啟動預設的防火牆機制時，則在您還沒開始設定防火牆之前，可以先清除所有規則，以確保您以下的設定不會受到舊有設定的干擾。 </td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center"><img src="../picture/icon.jpg" tppabs="http://www.suse.url.tw/picture/icon.jpg" width="11" height="11"></td>
    <td><strong><font color="#000099">定義防火牆政策</font></strong></td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>在封包進入 Firewall 後，會依我們所設定的規則依序做比對，只要比對符合，就會對此封包進行處理。那萬一都找無符合的比對規則時，則會依所定義的政策來做最後的決定，看是要拒絕或放行這個封包囉。 
    </td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center"><img src="../picture/icon.jpg" tppabs="http://www.suse.url.tw/picture/icon.jpg" width="11" height="11"></td>
    <td><strong><font color="#000099">設定防火牆規則</font></strong></td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>最後就是設定封包比對規則，及比對符合後的處理動作了。</td>
  </tr>
</table>
<br>
　了解了大致做法後，接下來就可以開始嘗試做設定了。<br>
<br>
<font size="+1"><strong><a name="11"></a><font size="5">21.3.1 清除所有規則</font><br>
<br>
</strong></font><strong>指令語法：</strong><br>
<table width="100%" border="0" bgcolor="#CCCCCC">
  <tr>
    <td><strong><font face="細明體">iptables [-t tables] [-FXZ] [chain]</font></strong> 
    </td>
  </tr>
</table>
<br>
　-t 參數是用來指定所使用的 table 為何，是 filter、nat 或 mangle。如未指定 table，則預設為 filter table。<br>
<br>
<strong>參數說明</strong>：<br>
<table width="100%" border="1">
  <tr> 
    <td width="6%" align="center" valign="middle" nowrap><font color="#000099">-F</font></td>
    <td width="94%"><font color="#000099">同等於 --flush。清除鏈中的所有規則。如未指定 chain，則預設為 
      table 中的所有 chain。</font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099">-X</font></td>
    <td><font color="#000099">同等於 --delete-chain。清除自訂鏈中的所有規則。如未指定 chain，則預設為 table 
      中的所有自訂鏈。</font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099">-Z</font></td>
    <td><font color="#000099">同等於 --zero。將所有 chain 中的封包計數器歸零。計數器是計算同一封包出現的次數。</font></td>
  </tr>
</table>
<strong><br>
範例</strong>： 
<table width="60%" border="0">
  <tr> 
    <td nowrap bgcolor="#000000"><font color="#FFFFFF">suse:~ #<font face="細明體"> 
      </font><font color="#FFFF00" face="細明體"><strong>iptables -F</strong></font><font face="細明體"><br>
      </font>suse:~ #<font face="細明體"> </font><font color="#FFFF00" face="細明體"><strong>iptables 
      -X</strong></font><font face="細明體"><br>
      </font>suse:~ #<font face="細明體"> </font><font color="#FFFF00" face="細明體"><strong>iptables 
      -Z</strong></font><font face="細明體"><br>
      </font>suse:~ #<font face="細明體"> </font><font color="#FFFF00" face="細明體"><strong>iptables 
      -t nat -F</strong></font><font face="細明體"><br>
      </font>suse:~ #<font face="細明體"> </font><font color="#FFFF00" face="細明體"><strong>iptables 
      -t nat -X</strong></font><font face="細明體"><br>
      </font>suse:~ #<font face="細明體"> </font><font color="#FFFF00" face="細明體"><strong>iptables 
      -t nat -Z</strong></font><font face="細明體"><br>
      </font>suse:~ #<font face="細明體"> </font><strong><font color="#FFFF00" face="細明體">iptables 
      -t mangle -F</font></strong><font face="細明體"><br>
      </font>suse:~ #<font face="細明體"> </font><font color="#FFFF00" face="細明體"><strong>iptables 
      -t mangle -X</strong></font><font face="細明體"><br>
      </font>suse:~ #<font color="#FFFF00" face="細明體"> <strong>iptables -t mangle 
      -Z</strong></font></font></td>
  </tr>
</table>
<font size="+1"><strong><br>
<a name="12"></a><font size="5">21.3.2 定義防火牆政策 (Policy)</font><br>
</strong></font><br>
<strong>指令語法：</strong><br>
<table width="100%" border="0" bgcolor="#CCCCCC">
  <tr> 
    <td><strong><font face="細明體">iptables [-t table] -P [chains] [ACCEPT,DROP]</font></strong></td>
  </tr>
</table>
<br>
　這個語法很容易理解，應該不需多加解釋。在 20.3 節一開始有說到，在封包進入後，於 Firewall 中都找無符合的規則時，則會依照您所定義的政策來決定允許或拒絕這個封包。看到這裡或許會想說，那政策是不是應該都要設定 
DROP 啊，如果您是初次接觸 iptables 的朋友，建議先不要這麼做，因為一旦把 Policy 全設成 DROP 後，您需對每一個允許進入、出去及經過本機的封包設定相關的規則，且如果 
NAT 主機上存在著兩三個介面的話，還需分別對這些不同的介面做設定，這可不是那麼好搞定噢。<br>
<br>
<strong>範例</strong>：<br>
<table width="60%" border="0">
  <tr>
    <td nowrap bgcolor="#000000"><font color="#FFFFFF">suse:~ #</font> <font color="#FFFF00" face="細明體"><strong>iptables 
      -P INPUT ACCEPT<br>
      </strong></font><font color="#FFFFFF">suse:~ #</font> <font color="#FFFF00" face="細明體"><strong></strong></font><font color="#FFFF00" face="細明體"><strong>iptables 
      -P OUTPUT ACCEPT<br>
      </strong></font><font color="#FFFFFF">suse:~ #</font> <font color="#FFFF00" face="細明體"><strong></strong></font><font color="#FFFF00" face="細明體"><strong>iptables 
      -P FORWARD ACCEPT<br>
      </strong></font><font color="#FFFFFF">suse:~ #</font> <font color="#FFFF00" face="細明體"><strong></strong></font><font color="#FFFF00" face="細明體"><strong>iptables 
      -t nat -P PREROUTING ACCEPT<br>
      </strong></font><font color="#FFFFFF">suse:~ #</font> <font color="#FFFF00" face="細明體"><strong></strong></font><font color="#FFFF00" face="細明體"><strong>iptables 
      -t nat -P POSTROUTING ACCEPT<br>
      </strong></font><font color="#FFFFFF">suse:~ #</font> <font color="#FFFF00" face="細明體"><strong></strong></font><font color="#FFFF00" face="細明體"><strong>iptables 
      -t nat -P OUTPUT ACCEPT</strong></font></td>
  </tr>
</table>
<strong><font size="+1"><br>
<a name="13"></a><font size="5">21.3.3 設定防火牆規則</font></font></strong><br>
<br>
　接著就開始學習使用 iptables 來設定規則囉。先對 iptables 的基本語法有個認識： <br>
<br>
<strong>指令語法</strong>：
<table width="50%" border="0">
  <tr> 
    <td height="25" nowrap bgcolor="#CCCCCC"><strong><font face="細明體">iptables 
      [-t table] &lt;option&gt; &lt;chain&gt; &lt;rules&gt; -j &lt;target&gt;</font></strong></td>
  </tr>
</table>
<br>
　語法中，在 table 之後，是先指定您要使用的是這個 table 裡的哪個 chain ﹔再來是指定比對封包的規則 (rules) 為何 ﹔最後就是把那些經比對結果符合的封包要做如何的處置。因此待一會兒就以這三大部分來分別說明。<br>
<br>
<font size="+1"><strong><font size="+1"><img src="../picture/1775.gif" tppabs="http://www.suse.url.tw/picture/1775.gif" width="18" height="18"></font></strong></font> 
<font size="4"><strong>指定 table 及 chain</strong></font><br>
<br>
　table的部分應該不用再多做說明，這裡就針對那些 chains 所搭配的參數做個簡單的介紹。請參考以下的參數說明列表。<br>
<br>
<table width="100%" border="1">
  <tr bgcolor="#CCCCCC"> 
    <td align="center"><strong><font color="#000099">參數</font></strong></td>
    <td><strong><font color="#000099">說　明</font></strong></td>
  </tr>
  <tr> 
    <td width="7%" align="center"><font color="#000099">-D</font></td>
    <td width="93%"><font color="#000099">同等於 --delete。於鏈中刪除一條或多條規則。</font></td>
  </tr>
  <tr> 
    <td align="center"><font color="#000099">-N</font></td>
    <td><font color="#000099">同等於 --new-chain。建立一條新的自訂鏈。</font></td>
  </tr>
  <tr> 
    <td align="center" nowrap><font color="#000099">-A</font></td>
    <td nowrap><font color="#000099">同等於 --append。新增一條或多條規則於鏈的後端。</font></td>
  </tr>
  <tr> 
    <td align="center" nowrap><font color="#000099">-I</font></td>
    <td nowrap><font color="#000099">同等於 --insert。於鏈中的某個位置插入一條或多條規則。</font></td>
  </tr>
  <tr> 
    <td align="center"><font color="#000099">-L</font></td>
    <td><font color="#000099">同等於 --list。列出鏈中的所有規則。</font></td>
  </tr>
</table>
<br>
<font size="+1"><strong><font size="+1"><img src="../picture/1775.gif" tppabs="http://www.suse.url.tw/picture/1775.gif" width="18" height="18"></font></strong></font> 
<font size="+1"><strong>封包比對規則 ( rules )</strong></font>　<br>
<br>
　再來是 rules 的部分，以下列出一般常用來做封包規則比對的參數用法： <br>
<br>
<table width="100%" border="1">
  <tr bgcolor="#CCCCCC"> 
    <td align="center" nowrap><font color="#000099"><strong>參 數</strong></font></td>
    <td><font color="#000099"><strong>說　明</strong></font></td>
  </tr>
  <tr> 
    <td width="8%" align="center" nowrap><font color="#000099" size="+1"><strong>-i、-o</strong></font></td>
    <td width="92%"><font color="#000099">-i 是用來比對封包從哪個網路介面進入，-o 是用來比對封包從哪個網路介面出去。比如：<font face="細明體">-i 
      dsl0、-o eth0</font></font></td>
  </tr>
  <tr> 
    <td align="center" nowrap><font color="#000099" size="+1"><strong>-s、-d</strong></font></td>
    <td><font color="#000099">-s 是用來比對封包的來源位址或網路段，-d 是用來比對封包的目的位址或網路段。比如：<font face="細明體">-s 
      192.168.1.0/24、-d 61.221.37.238</font></font></td>
  </tr>
  <tr> 
    <td align="center" nowrap><font color="#000099" size="+1"><strong>-p</strong></font></td>
    <td><font color="#000099">用來比對封包的協定 (protocol)，其後可接的有 tcp、udp、icmp、all，其中 
      all 表示所有的協定類型。詳細說明請參考以下的 [表一]。</font></td>
  </tr>
  <tr> 
    <td align="center" nowrap><font color="#000099" size="+1"><strong>-m</strong></font></td>
    <td><font color="#000099">當使用 -m (match) 參數時，可額外比對一些項目，例如封包的連線狀態、MAC 位址等等。詳細說明請參考以下的 
      [表二]。</font></td>
  </tr>
</table>
<br>
<strong> [表 一]</strong>：<strong>-p (protocol) 參數用法</strong><br>
<br>
<table width="100%" border="1">
  <tr bgcolor="#CCCCCC"> 
    <td width="8%" align="center" valign="middle" nowrap><font color="#000099"><strong>協 
      定</strong></font></td>
    <td width="11%" align="center" valign="middle" nowrap><font color="#000099"><strong>相關參數</strong></font></td>
    <td width="81%"> <div align="left"><font color="#000099"><strong>說　　明</strong></font></div></td>
  </tr>
  <tr> 
    <td rowspan="3" align="center" valign="middle" nowrap><font color="#000099"><strong>tcp</strong></font></td>
    <td height="35" align="center" valign="middle" nowrap><font color="#000099">--sport</font></td>
    <td><font color="#000099">比對封包的來源 port，可為單一 port 或連續範圍之 port。<br>
      <strong>例</strong>：<strong>-p tcp --sport 1024:65535</strong></font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099">--dport</font></td>
    <td><font color="#000099">比對封包的目的 port，可為單一 port 或連續範圍之 port。<br>
      <strong>例</strong>：<strong>-p tcp --dport 80</strong></font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099">--tcp-flags</font></td>
    <td><font color="#000099">比對 TCP 協定中的 control flag。flags 共佔六位元，分別是 U (URG: 
      Urgent 緊急)、A (ACK: Acknowledgement 回應)、P (PSH: Push 推進)、R (RST: Reset 重設)、S 
      (SYN: Synchronize 同步)、F (FIN: Final 結束)。<br>
      <strong>例</strong>：<strong>-p tcp --tcp-flags SYN,ACK,FIN SYN </strong><br>
      另外還有個 --syn 可以與 -p tcp來搭配使用，這表示此封包是屬於主動連線的一方。<br>
      <strong>例</strong>：<strong>-p tcp --syn</strong><br>
      以上這兩個範例，其實是具有相同效果的。</font></td>
  </tr>
  <tr> 
    <td rowspan="2" align="center" valign="middle" nowrap><font color="#000099"><strong>udp</strong></font></td>
    <td align="center" valign="middle" nowrap><font color="#000099">--sport</font></td>
    <td><font color="#000099">比對封包的來源 port，可為單一 port 或連續範圍之 port。<br>
      <strong>例</strong>：<strong>-p udp --sport 1024:65535</strong></font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099">--dport</font></td>
    <td><font color="#000099">比對封包的目的 port，可為單一 port 或連續範圍之 port。<br>
      <strong>例</strong>：<strong>-p udp --dport 53</strong></font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099"><strong>icmp</strong></font></td>
    <td align="center" valign="middle" nowrap><font color="#000099">--icmp-type</font></td>
    <td><font color="#000099">比對 icmp 的類型。icmp 共有十餘種類型，比較常見的如 echo-request (type 
      8)、echo-reply (type 0) 等，至於其他類型，請執行 &quot;iptables -p icmp -h&quot; 自行查閱。<br>
      <strong>例</strong>：<strong>-p icmp --icmp-type 8</strong></font></td>
  </tr>
</table>
<br>
<strong>[表 二]：–m (match) 參數用法</strong><br>
<br>
<table width="100%" border="1">
  <tr bgcolor="#CCCCCC"> 
    <td width="9%" align="center" valign="middle" nowrap><font color="#000099"><strong>比對類型</strong></font></td>
    <td width="12%" align="center" valign="middle" nowrap><font color="#000099"><strong>相關參數</strong></font></td>
    <td width="79%"><font color="#000099"><strong>說　　明</strong></font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099"><strong>state</strong></font></td>
    <td align="center" valign="middle" nowrap><font color="#000099">--state</font></td>
    <td><font color="#000099">比對封包的連線狀態，而連線狀態共有以下四種：<br>
      ˙NEW：新建立連線的封包。<br>
      ˙ESTABLISHED：已建立連線的封包 (回應封包)。<br>
      ˙RELATED：與現有連線相關的封包，如 ftp-data。<br>
      ˙INVALID：無法識別或資料破損的封包。<br>
      <strong>例</strong>：<strong>-m state --state INVALID,NEW</strong></font></td>
  </tr>
  <tr> 
    <td rowspan="3" align="center" valign="middle" nowrap><font color="#000099"><strong>multiport</strong></font></td>
    <td align="center" valign="middle" nowrap><font color="#000099">--sport</font></td>
    <td><font color="#000099">比對封包的來源 port，其後可接不連續的多個 port。</font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099">--dport</font></td>
    <td><font color="#000099">比對封包的目的 port，其後可接不連續的多個 port。<br>
      <strong>例</strong>：<strong>-m multiport --dport 25,80,110</strong></font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099">--port</font></td>
    <td><font color="#000099">比對封包的來源與目的 port 相同者。</font></td>
  </tr>
  <tr> 
    <td rowspan="2" align="center" valign="middle" nowrap><font color="#000099"><strong>limit</strong></font></td>
    <td align="center" valign="middle" nowrap><font color="#000099">--limit</font></td>
    <td><font color="#000099">比對在單位時間內封包的平均流量限制。<br>
      <strong>例</strong>：<strong>-m limit --limit 5/hour</strong><br>
      上面的設定是在比對每小時封包的平均流量是否有達到一次 5 個封包，如果有的話會終止繼續比對，等平均流量降至一次 5 個以下才又繼續動作。另外您亦可使用 
      minute、second 做單位。預設為 3/hour。</font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099">--limit-burst</font></td>
    <td><font color="#000099">比對一次能夠進入的最大封包數。<br>
      <strong>例</strong>：<strong>-m limit --limit-burst 6</strong><br>
      上面的設定是在比對一次進入的封包最大數是否有超過 6 個，如果有的話，超過的封包將會被丟棄。預設為 5。</font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099"><strong>mac</strong></font></td>
    <td align="center" valign="middle" nowrap><font color="#000099">--mac-source</font></td>
    <td><font color="#000099">比對封包的來源 MAC 位址，只能用在 INPUT、 PREROUTING、FORWARD chain 
      上頭。<br>
      <strong>例</strong>：<strong>-m mac --mac-source 00:04:E2:19:02:0C</strong></font></td>
  </tr>
</table>
<br>
<br>
<font size="+1"><strong><font size="+1"><img src="../picture/1775.gif" tppabs="http://www.suse.url.tw/picture/1775.gif" width="18" height="18"></font></strong></font> 
<font size="4"><strong>封包最後處理方式 ( target )</strong></font><br>
<br>
　當設定完比對規則後，您還需為那些符合規則比對的封包進行最後的處理動作，也就是透過 -j 參數來指派囉。至於常採用的動作有以下幾個： <br>
<br>
<table width="100%" border="1">
  <tr bgcolor="#CCCCCC"> 
    <td align="center" valign="middle" nowrap><font color="#000099"><strong>TARGET</strong></font></td>
    <td> 
      <div align="center"><font color="#000099"><strong>代　表　意　義</strong></font></div></td>
  </tr>
  <tr> 
    <td width="7%" align="center" valign="middle" nowrap><font color="#000099"><strong>ACCEPT</strong></font></td>
    <td width="93%"><font color="#000099">允許封包通過。處理完後將不再比對這個 chain 的其他規則，而是直接到下一個 
      chain 繼續比對。</font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099"><strong>DROP</strong></font></td>
    <td><font color="#000099">將封包丟棄而不予以處理。處理完後就結束。</font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099"><strong>REJECT</strong></font></td>
    <td><font color="#000099">拒絕封包進入。與 DROP 差不多意思，只不過在拒絕的同時，還會向對方送出一個 ICMP &quot;port-unreachable&quot; 
      的訊息。處理完後就結束。</font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099"><strong>DNAT</strong></font></td>
    <td><font color="#000099">把封包的 destination socket 做替代。處理完後將不再比對這個 chain 的其他規則，而是直接到下一個 
      chain 繼續比對 。</font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099"><strong>SNAT</strong></font></td>
    <td><font color="#000099">把封包的 source socket 做替代。處理完後將不再比對這個 chain 的其他規則，而是直接到下一個 
      chain 繼續比對。</font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099"><strong>REDIRECT</strong></font></td>
    <td><font color="#000099">將封包重導至本機的某個 port。處理完後將會繼續比對這個 chain 的其他規則。</font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099"><strong>MASQUERADE</strong></font></td>
    <td><font color="#000099">將來源封包的 IP 位址轉換成對外介面的 public 位址。處理完後將不再比對這個 chain 
      的其他規則，而是直接到下一個 chain 繼續比對。</font></td>
  </tr>
  <tr> 
    <td align="center" valign="middle" nowrap><font color="#000099"><strong>LOG</strong></font></td>
    <td><font color="#000099">將封包訊息記錄在 /var/log/messages (預設) 中。處理完後將會繼續比對這個 chain 
      的其他規則。</font></td>
  </tr>
</table>
<br>
　看完以上那麼多的說明，可能您已經頭昏眼花了，所以下一小節將會舉幾個範例來做說明。<br>
<br>
<font color="#000000" size="5"><strong>21.3.4 範例練習</strong></font><br>
<br>
<table width="100%" border="0">
  <tr> 
    <td width="6%" height="27" nowrap bgcolor="#000000"><font color="#000000"><strong><font color="#FFFFFF" size="+1">範例一</font></strong></font></td>
    <td width="94%"><font color="#000000"><strong> 　<font size="4">讓 client 能透過 
      NAT 來存取外部的服務</font></strong></font></td>
  </tr>
</table>
<br>
<table width="100%" border="0">
  <tr> 
    <td height="41" bgcolor="#000000"><font color="#FFFFFF">suse:~ #<font color="#FFFF00" face="細明體"> 
      <strong>iptables -t nat -A POSTROUTING -o eth0 -s 192.168.1.0/24 \</strong></font><br>
      &gt; <font color="#FFFF00" face="細明體"><strong>-j SNAT --to 210.201.181.100</strong></font></font></td>
  </tr>
</table>
<br>
<font color="#FFFFFF"><font color="#000000"> 　由 192.168.1.0/24 這個網路段所過來的封包，在經過 
Routing table 後、尚未出 eth0 介面前，將其來源 IP 位址轉換成 210.201.181.100。<br>
<br>
　由於 private IP 無法直接與 public IP 進行連線，因此透過這條規則的設定，才能讓 Client 順利存取 internet 上的服務。不過要達到這個目的，尚需啟動</font><font color="#000000"> 
NAT 主機上的路由功能：<br>
<br>
</font></font> 
<table width="100%" border="0" bgcolor="#000000">
  <tr>
    <td height="25"><font color="#FFFFFF">suse:~ # <font color="#FFFF00" face="細明體"><strong>echo 
      &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward</strong></font></font></td>
  </tr>
</table>
<font color="#FFFFFF"><font color="#000000"><br>
　</font><font color="#FFFFFF"><font color="#000000">另外在設定防火牆規則時，未設定到的規則會被視為接受，比如沒指定 
-d、--sport、--dport，就表示不管封包的來源目的 port，也不管目的位址為何，都會被接受的意思。<br>
<br>
　以上的範例是針對擁有固定 IP 時的做法，但若您是使用 adsl 浮動 IP 的話，由於 NAT 對外的介面為 dsl0 ( 或 ppp0 )，因此剛剛那條規則需做個調整：</font></font><font color="#000000"><br>
<br>
</font></font>
<table width="100%" border="0" bgcolor="#000000">
  <tr>
    <td height="39"><font color="#FFFFFF">suse:~ # <font color="#FFFF00" face="細明體"><strong>iptables 
      -t nat -A POSTROUTING -o dsl0 -s 192.168.1.0/24</strong> <strong>\</strong></font><br>
      &gt; <font color="#FFFF00" face="細明體"><strong>-j MASQUERADE</strong></font></font></td>
  </tr>
</table>
<font color="#FFFFFF"><font color="#000000"><br>
</font></font>　這樣就可以把來源 IP 位址轉換成 dsl0 介面的位址。<br>
<br>
<table width="100%" border="0">
  <tr> 
    <td width="5%" height="27" nowrap bgcolor="#000000"><font color="#000000"><strong><font color="#FFFFFF" size="+1">範例二</font></strong></font></td>
    <td width="95%">　<font color="#000000"><font color="#FFFFFF"><strong><font color="#000000" size="4">伺服器架設在區網內的設定方式</font></strong></font></font></td>
  </tr>
</table>
<br>
<table width="100%" border="0">
  <tr> 
    <td height="40" bgcolor="#000000"><font color="#FFFFFF">suse:~ # <font color="#FFFF00" face="細明體"><strong>iptables 
      -t nat -A PREROUTING -i eth0 -d 210.201.181.100 </strong></font><font color="#FFFFFF"><font color="#FFFF00" face="細明體"><strong>-p 
      tcp</strong></font></font> <font color="#FFFF00" face="細明體"><strong>\</strong></font><br>
      &gt; <font color="#FFFF00" face="細明體"><strong>--dport 80 -j DNAT --to 192.168.1.200:80</strong></font></font></td>
  </tr>
</table>
<br>
<font color="#FFFFFF"><font color="#000000"> 　封包從 eth0 介面進入後、還不可路由前，若分析其 header 
內容，發覺封包的目的位址是 210.201.181.100、目的 port 是 80 port，則將此 Destination socket 替代成 192.168.1.200:80，修改完後再依 
Routing table 來把此封包送到指定的位址。</font></font><br>
<br>
<table width="100%" border="0">
  <tr> 
    <td width="6%" height="26" nowrap bgcolor="#000000"><font color="#000000"><strong><font color="#FFFFFF" size="+1">範例三</font></strong></font></td>
    <td width="94%">　<font color="#000000"><strong><font color="#000000"><font color="#FFFFFF"><font color="#000000" size="4">NAT 
      主機本身開放特定服務讓封包進入</font></font></font></strong></font></td>
  </tr>
</table>
<br>
<table width="100%" border="0">
  <tr> 
    <td height="57" nowrap bgcolor="#000000"><font color="#FFFFFF">suse:~ # <strong><font color="#FFFF00" face="細明體">iptables 
      -A INPUT -i eth0 -p tcp --dport 25 -j ACCEPT</font></strong><br>
      suse:~ # <font color="#FFFF00" face="細明體"><strong>iptables -A INPUT -i eth0 
      -p tcp --dport 110 -j ACCEPT</strong></font><br>
      suse:~ #<strong><font color="#FFFF00"> </font></strong><font color="#FFFF00" face="細明體"><strong>iptables 
      -A INPUT -i eth0 -p tcp --dport 80 -j ACCEPT</strong></font></font></td>
  </tr>
</table>
<br>
　當 NAT 本身亦提供 smtp、pop3 及 http 等相關服務時，就這麼做設定即可。不過您也可以把以上那三條規則，利用「-m multiport」 
來合併成一條規則：<br>
<br>
<table width="100%" border="0" bgcolor="#000000">
  <tr>
    <td height="24"><font color="#FFFFFF">suse:~ # <font color="#FFFF00"><strong>iptables 
      -A INPUT -i eth0 -p tcp -m multiport --dport 25,110,80 </strong><strong>-j 
      ACCEPT</strong></font></font></td>
  </tr>
</table>
<br>
　那如果 NAT 也有提供 DNS 服務時，就補上以下規則：<br>
<br>
<table width="100%" border="0" bgcolor="#000000">
  <tr>
    <td height="40"><font color="#FFFFFF">suse:~ # <font color="#FFFF00" face="細明體"><strong>iptables 
      -A INPUT -i eth0 -p tcp --dport 53 -j ACCEPT<br>
      </strong></font>suse:~ #<font color="#FFFF00"><strong> </strong></font><font color="#FFFF00" face="細明體"><strong>iptables 
      -A INPUT -i eth0 -p udp --dport 53 -j ACCEPT</strong></font></font></td>
  </tr>
</table>
<br>
<table width="100%" border="0">
  <tr> 
    <td width="5%" height="27" nowrap bgcolor="#000000"><font color="#000000"><strong><font color="#FFFFFF" size="+1">範例四</font></strong></font></td>
    <td width="95%">　<font color="#000000"><font color="#FFFFFF"><strong><font color="#000000" size="4">拒絕別人 
      ping 您的主機</font></strong></font></font></td>
  </tr>
</table>
<br>
<table width="100%" border="0">
  <tr> 
    <td height="23" bgcolor="#000000"><font color="#FFFFFF">suse:~ # <strong><font color="#FFFF00">iptables 
      -A INPUT -p icmp --icmp-type 8 -j DROP</font></strong></font></td>
  </tr>
</table>
<br>
<font color="#FFFFFF"><font color="#000000"> 　在這個範例中，並沒有指定封包從哪個介面進入，這就表示所有介面都算在內囉。因此不論封包從哪個介面進入，只要對方送出的是 
echo-request 的需求時，一律予以丟棄。</font></font><font color="#000000"><br>
</font><br>
<table width="100%" border="0">
  <tr> 
    <td width="6%" height="26" nowrap bgcolor="#000000"><font color="#000000"><strong><font color="#FFFFFF" size="+1">範例五</font></strong></font></td>
    <td width="94%">　<font color="#000000"><strong><font color="#0000FF"><font color="#FFFFFF"><font color="#000000" size="4">抵擋特定來源封包進入另一台主機</font></font></font></strong></font></td>
  </tr>
</table>
<br>
<table width="100%" border="0">
  <tr> 
    <td height="39" bgcolor="#000000"><font color="#FFFFFF">suse:~ # <strong><font color="#FFFF00">iptables 
      -A FORWARD -i eth0 -s 192.168.5.0/24 </font><font color="#FFFFFF"><font color="#FFFF00"><strong>-d 
      192.168.2.10</strong></font></font> <font color="#FFFFFF"><strong></strong></font> 
      <font color="#FFFF00">\</font></strong><br>
      &gt; <font color="#FFFF00"><strong> </strong></font><font color="#FFFFFF"><strong><font color="#FFFFFF"><strong><font color="#FFFFFF"><strong><font color="#FFFFFF"><strong><font color="#FFFF00">-</font></strong></font></strong></font><font color="#FFFF00">p 
      tcp</font></strong></font> <font color="#FFFF00">--sport 1024:65535</font></strong></font> 
      <font color="#FFFF00"><strong>--dport 80 -j DROP</strong></font></font></td>
  </tr>
</table>
<br>
<font color="#FFFFFF"><font color="#000000"> 　當封包的來源端為 192.168.5.0/24，且來源 port 
是在 1024 到 65535 之間時，若其抵達的目的為 192.168.2.10 這台主機的 80 port，則一律將其 drop 掉。</font></font><br>
<br>
<table width="100%" border="0">
  <tr> 
    <td width="6%" height="26" nowrap bgcolor="#000000"><font color="#000000"><strong><font color="#FFFFFF" size="+1">範例六</font></strong></font></td>
    <td width="94%">　<font color="#000000"><strong><font color="#000000"><font color="#FFFFFF"><font color="#000000" size="4">拒絕主動連線的封包</font></font></font></strong></font></td>
  </tr>
</table>
<br>
<table width="100%" border="0">
  <tr> 
    <td height="25" nowrap bgcolor="#000000"><font color="#FFFFFF">suse:~ #<font color="#FFFF00"><strong> 
      iptables -A INPUT -i eth0 -p tcp --syn -j DROP</strong></font></font></td>
  </tr>
</table>
<br>
<font color="#FFFFFF"><font color="#000000"> 　這個應不成問題才是。另外在<font color="#FFFFFF"><font color="#000000">「</font></font></font><font color="#000000">--syn」之前加上個「!</font><font color="#FFFFFF"><font color="#000000">」</font></font><font color="#000000">，如</font><font color="#FFFFFF"><font color="#000000">「</font></font><font color="#000000"><font face="細明體">! 
--syn</font></font><font color="#FFFFFF"><font color="#000000">」</font></font><font color="#000000">，就表示非主動連線的封包。</font><font color="#FFFFFF"><font color="#00FFFF"><font color="#000000">再參考下一個例子：</font></font></font></font><font color="#000000"></font><font color="#000000"><br>
<br>
</font>
<table width="100%" border="0" bgcolor="#000000">
  <tr>
    <td height="24"><font color="#FFFFFF">suse:~ #<font color="#FFFF00"><strong> 
      iptables -A INPUT -i eth0 -m state --state NEW,INVALID -j DROP</strong></font></font></td>
  </tr>
</table>
<font color="#000000"><br>
</font>　<font color="#FFFFFF"><font color="#000000">這樣對於新建立的連線 (主動連線) 或無效的封包將會被拒絕。那如果要讓已建立連線或有關聯的封包通過，可這麼設定：</font></font><br>
<br>
<table width="100%" border="0" bgcolor="#000000">
  <tr>
    <td height="24"><font color="#FFFFFF">suse:~ #<font color="#FFFF00"><strong> 
      iptables -A INPUT -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT</strong></font></font></td>
  </tr>
</table>
<br>
<table width="100%" border="0">
  <tr> 
    <td width="5%" height="26" nowrap bgcolor="#000000"><font color="#000000"><strong><font color="#FFFFFF" size="+1">範例七</font></strong></font></td>
    <td width="95%">　<font color="#000000"><strong><font color="#000000"><font color="#FFFFFF"><font color="#000000" size="4">拒絕某特定來源進入本機</font></font></font></strong></font></td>
  </tr>
</table>
<br>
<table width="100%" border="0">
  <tr> 
    <td height="29" nowrap bgcolor="#000000"><font color="#FFFFFF"> suse:~ #<font color="#FFFF00"><strong> 
      iptables -A INPUT -i eth1 -m mac --mac-source 00:04:E2:19:02:0C -j DROP</strong></font></font></td>
  </tr>
</table>
<br>
　拒絕特定的來源 MAC 位址，從 eth1 介面進入本機。<br>
<br>
<table width="100%" border="0">
  <tr> 
    <td width="6%" height="26" nowrap bgcolor="#000000"><font color="#000000"><strong><font color="#FFFFFF" size="+1">範例八</font></strong></font></td>
    <td width="94%"><font color="#000000"><strong><font color="#000000"><font color="#FFFFFF"><font color="#000000">　<font size="4">記錄規則設定</font></font></font></font></strong></font></td>
  </tr>
</table>
<br>
<table width="100%" border="0">
  <tr> 
    <td height="25" bgcolor="#000000"><font color="#FFFFFF">suse:~ #<font color="#FFFF00"><strong> 
      iptables -A INPUT -i eth0 -p tcp --dport 80 -j LOG</strong></font></font></td>
  </tr>
</table>
<p><font color="#FFFFFF"><font color="#000000"> 　這樣會把進入 80 port 的封包，其相關資訊記錄在 /var/log/messages 
  內。</font></font><br>
  <br>
  <br>
  <font color="#0000FF" size="+1"><strong><a name="14"></a><font size="6">21.4 
  綜合範例</font></strong></font><br>
  <br>
  　為了方便讀者能在家裡實際操作一番，因此本範例是以最多人使用的 adsl 撥接架構來設定 iptables，而做 NAT 的主機只需有一片網卡就行了，這樣對外就是 
  dsl0 (220.132.78.75)，對內就是 eth0 (192.168.1.111)。<br>
  <br>
  <strong><font color="#000000" size="5">21.4.1 防火牆規劃</font></strong><br>
  <br>
  　一台 NAT 主機對外，同時這台主機還提供 SSH、DNS 及 DHCP 的服務，其中 SSH 服務是希望提供給內外部做遠端連線，但外部只允許 61.231.72.32 
  的來源端做存取，DHCP 則是提供 IP 位址給內部電腦使用，那 DNS 當然是負責名稱解析的工作囉。另外區網內架設兩台 Server，一部做 Apache 
  (192.168.1.1)，另一部做 Mail Server (192.168.1.2)。最後就是 Client 端需能透過 NAT 來存取 Internet 
  的服務。至於基本架構圖請參考以下：</p>
<p align="center"> <img src="../picture/firewall3.png" tppabs="http://www.suse.url.tw/picture/firewall3.png" width="438" height="227"><br>
  <font size="2">圖八：Firewall 基本規劃圖</font></p>
<p> 　根據此架構而言，您必須在NAT主機上啟動 DHCP、DNS 及 SSH 等服務，然後再配合 iptables 來達成您環境上的需求。<br>
  <br>
  　SSH 服務的部分較簡單，請讀者自行解決，至於 DHCP、DNS 及 iptables 會在以下幾小節中，做個簡單的基本設定範例給讀者做參考。<br>
  <br>
  <font color="#000000" size="5"><strong>21.4.2 設定DHCP及DNS </strong></font><br>
  <br>
  <font size="+1"><strong><font size="+1"><img src="../picture/1775.gif" tppabs="http://www.suse.url.tw/picture/1775.gif" width="18" height="18"></font></strong></font> 
  <font size="4"><strong>設定 DHCP</strong></font><br>
  <br>
  　由於內網裡頭有兩部 Server，因此您需在 DHCP 設定檔裡，去指派兩個固定的位址給這兩台主機。以下是筆者 DHCP 上的設定範例：</p>
<table width="100%" border="0">
  <tr> 
    <td bgcolor="#000000"><font color="#FFFFFF">suse:~ # <font color="#FFFF00"><strong>vi 
      /etc/dhcpd.conf</strong></font><br>
      <br>
      <font face="細明體">ddns-update-style none;<br>
      <br>
      default-lease-time 43200;<br>
      max-lease-time 86400;<br>
      option domain-name-servers 192.168.1.111;<br>
      option routers 192.168.1.111;<br>
      <br>
      subnet 192.168.1.0 netmask 255.255.255.0 {<br>
      　　　 range 192.168.1.120 192.168.1.250; }<br>
      <br>
      host apache {<br>
      　　　 hardware ethernet 00:05:5D:69:DD:B3;<br>
      　　　 fixed-address 192.168.1.1; }<br>
      <br>
      host postfix {<br>
      　　　 hardware ethernet 00:A0:CC:C0:2A:4B;<br>
      　　　 fixed-address 192.168.1.2; }</font><br>
      <br>
      suse:~ #<font color="#FFFF00"><strong> vi /etc/sysconfig/dhcpd</strong></font><br>
      <br>
      <font face="細明體">DHCPD_INTERFACE=&quot;eth0&quot;<br>
      </font><br>
      suse:~ # <font color="#FFFF00"><strong>rcdhcpd start </strong></font></font></td>
  </tr>
</table>
<br>
<font size="+1"><strong><font size="+1"><img src="../picture/1775.gif" tppabs="http://www.suse.url.tw/picture/1775.gif" width="18" height="18"></font></strong></font> 
<font size="4"><strong>設定 DNS</strong></font><br>
<br>
　這裡會使用 bind view 來分別提供內外部查詢，至於這麼做的原因，是希望內網的 Client 也能順利存取內部 Server 所提供的服務，如果不這樣做的話，將會因為 
ICMP 的 Host Gateway Redirect 問題，導致 Client 存取內部服務的失敗 ﹔其實關於這方面所遭遇的困難，可以利用 iptables 
的 socket 替代方式來把 source IP 轉換成 NAT 內部介面的 IP，如此一來就可以讓內部順利存取服務，只不過我們這裡是使用 bind view 
來解決這方面的問題罷了。<br>
<br>
　以下就分別來設定 named.conf 及 zone file 囉。<br>
<br>
<table width="100%" border="0">
  <tr>
    <td width="2%">&nbsp;</td>
    <td width="3%" align="center"><img src="../picture/icon.jpg" tppabs="http://www.suse.url.tw/picture/icon.jpg" width="11" height="11"></td>
    <td width="95%"><strong><font color="#000099">設定 named.conf</font></strong></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td><table width="100%" border="0">
        <tr> 
          <td height="572" bgcolor="#000000"><font color="#FFFFFF">suse:~ # <font color="#FFFF00"><strong>vi 
            /etc/named.conf</strong></font><br>
            <br>
            <font face="細明體">options { <br>
            　　　directory &quot;/var/lib/named&quot;; <br>
            };<br>
            <br>
            view &quot;internal&quot; {<br>
            　　　　match-clients { 192.168.1.0/24;127.0.0.1; };<br>
            　　　　recursion yes;<br>
            <br>
            　　　　zone &quot;.&quot; in {<br>
            　　　　　　　　type hint;<br>
            　　　　　　　　file &quot;root.hint&quot;;<br>
            　　　　};<br>
            <br>
            　　　　zone &quot;paching.org&quot; in {<br>
            　　　　　　　　type master;<br>
            　　　　　　　　file &quot;master/paching.in.db&quot;;<br>
            　　　　};<br>
            }; </font> 
            <p><font face="細明體">view &quot;external&quot; {<br>
              　　　　match-clients { any; };<br>
              　　　　recursion no;<br>
              <br>
              　　　　zone &quot;.&quot; in {<br>
              　　　　　　　　type hint;<br>
              　　　　　　　　file &quot;root.hint&quot;;<br>
              　　　　};<br>
              <br>
              　　　　zone &quot;paching.org&quot; in {<br>
              　　　　　　　　type master;<br>
              　　　　　　　　file &quot;master/paching.out.db&quot;;<br>
              　　　　};<br>
              };</font><font color="#FFFFFF"></font></p>
            </font></td>
        </tr>
      </table></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td align="center"><img src="../picture/icon.jpg" tppabs="http://www.suse.url.tw/picture/icon.jpg" width="11" height="11"></td>
    <td><strong><font color="#000099">設定 zone file</font></strong></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td><table width="100%" border="0">
        <tr> 
          <td height="394" bgcolor="#000000"><font color="#FFFFFF"> 
            <p>suse:/var/lib/named/master # <strong><font color="#FFFF00">vi paching.in.db</font></strong></p>
            </font> <font color="#FFFFFF" face="細明體">$TTL 600<br>
            $ORIGIN paching.org.<br>
            @　　 IN　　SOA　　ns.paching.org.　　barry.paching.org.　(　　　　　　<br>
            　　 　　2007012501　5400　900　864000　1200　)<br>
            　　　IN 　 NS　　 ns.paching.org.<br>
            ns　　IN 　 A　　　192.168.1.111<br>
            mail　IN　　A　　　192.168.1.2<br>
            www　 IN　　A 　　 192.168.1.1<br>
            ssh　 IN 　 CNAME　ns</font><br> <br> <font color="#FFFFFF">suse:/var/lib/named/master 
            #<font color="#FFFF00"><strong> vi paching.out.db<br>
            <br>
            </strong></font><font color="#FFFFFF" face="細明體">$TTL 600<br>
            $ORIGIN paching.org.<br>
            @　　 IN　　SOA　　ns.paching.org.　　barry.paching.org.　(　　　　　　<br>
            　　 　　2007012501　5400　900　864000　1200　)<br>
            　　　IN 　 NS　　 ns.paching.org.<br>
            　　　IN 　 MX 10　mail.paching.org.</font><font color="#FFFF00"><strong><br>
            </strong></font><font color="#FFFFFF" face="細明體">ns　　IN 　 A　　　220.132.78.75<br>
            mail　IN　　A　　　220.132.78.75<br>
            www　 IN　　CNAME　ns</font><font color="#FFFF00"><strong> <br>
            </strong></font><font color="#FFFFFF"><font face="細明體">ssh</font><font color="#FFFFFF" face="細明體">　 
            IN　　CNAME　ns</font><font color="#FFFF00"><strong> </strong></font></font></font></td>
        </tr>
      </table></td>
  </tr>
</table>
<br>
　OK 的話就啟動 named 吧：<br>
<br>
<table width="100%" border="0">
  <tr> 
    <td height="25" bgcolor="#000000"><font color="#FFFFFF">suse:~ # <font color="#FFFF00"><strong>rcnamed 
      start</strong><font face="細明體"></font></font><font face="細明體"></font></font><font color="#000000">&nbsp;</font></td>
  </tr>
</table>
<br>
<font size="5"><strong>21.4.3 設定Firewall及NAT<br>
</strong></font><br>
　這算是最重要的地方了，如果此處搞不定的話，就無法達到當初的規劃要求，甚至您主機的安全也堪慮，話不多說，馬上做設定去。<br>
<br>
<table width="100%" border="0">
  <tr> 
    <td bgcolor="#000000"><p><font color="#FFFFFF">suse:~ # <font color="#FFFF00"><strong>vi 
        firewall.sh</strong></font></font><font color="#00FFFF"><br>
        <br>
        <font color="#0066FF">#! /bin/bash</font><br>
        <br>
        <strong>#</strong> <strong><font size="2">定義網路介面及內部網路段</font></strong><br>
        <font color="#FFFFFF">EXTNIC=dsl0<br>
        INNIC=eth0<br>
        INNET=192.168.1.0/24</font> <br>
        <br>
        <strong>#</strong> <strong><font size="2">載入 FTP 相關模組</font></strong><br>
        <font color="#FFFFFF" face="細明體">modprobe ip_nat_ftp<br>
        modprobe ip_conntrack_ftp</font><br>
        <br>
        <strong># </strong><font size="2"><strong>清除所有規則</strong></font><br>
        <font color="#FFFFFF" face="細明體">iptables -F<br>
        iptables -X<br>
        iptables -Z<br>
        iptables -t nat -F<br>
        iptables -t nat -X<br>
        iptables -t nat -Z<br>
        iptables -t mangle -F<br>
        iptables -t mangle -X<br>
        iptables -t mangle -Z</font><font color="#FFFFFF"><br>
        <strong><br>
        <font color="#00FFFF"># </font><font color="#00FFFF" size="2">定義防火牆政策</font></strong><br>
        <font face="細明體">iptables -P INPUT DROP<br>
        iptables -P OUTPUT ACCEPT<br>
        iptables -P FORWARD ACCEPT<br>
        iptables -t nat -P PREROUTING ACCEPT<br>
        iptables -t nat -P POSTROUTING ACCEPT<br>
        iptables -t nat -P OUTPUT ACCEPT</font><br>
        <br>
        <font color="#00FFFF"><strong>#</strong></font><font color="#00FFFF" size="2"><strong> 
        讓 Client 能出去 Internet : IP 偽裝</strong></font><br>
        <font face="細明體">echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward<br>
        iptables -t nat -A POSTROUTING -o <font color="#00FFFF"><font color="#FFFFFF">$EXTNIC</font></font> 
        -s $INNET -j SNAT --to 220.132.78.75</font><br>
        <br>
        <font color="#00FFFF"><strong>#</strong></font><font color="#00FFFF" size="2"><strong> 
        防止 DOS 中斷攻擊</strong></font><br>
        <font face="細明體">if [ -e /proc/sys/net/ipv4/tcp_syncookies ]; then<br>
        　　echo &quot;1&quot; &gt; /proc/sys/net/ipv4/tcp_syncookies<br>
        fi</font><br>
        <br>
        <font color="#00FFFF"><strong>#</strong></font> <strong><font color="#00FFFF" size="2">阻擋別人掃描您主機之 
        port</font></strong><br>
        <font face="細明體">iptables -A INPUT -i $EXTNIC -p tcp --tcp-flags ALL FIN,URG,PSH 
        -j DROP<br>
        iptables -A INPUT -i </font><font color="#00FFFF"><font color="#FFFFFF"><font face="細明體">$EXTNIC</font></font></font><font face="細明體"> 
        -p tcp --tcp-flags ALL ALL -j DROP<br>
        iptables -A INPUT -i </font></font></font><font color="#00FFFF"><font color="#FFFFFF"><font face="細明體">$EXTNIC</font></font></font><font color="#FFFFFF" face="細明體"> 
        -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP<br>
        iptables -A INPUT -i </font><font color="#00FFFF"><font color="#FFFFFF"><font face="細明體">$EXTNIC</font></font></font><font color="#FFFFFF" face="細明體"> 
        -p tcp --tcp-flags ALL NONE -j DROP<br>
        iptables -A INPUT -i </font><font color="#00FFFF"><font color="#FFFFFF"><font face="細明體">$EXTNIC</font></font></font><font color="#FFFFFF" face="細明體"> 
        -p tcp --tcp-flags SYN,RST SYN,RST -j DROP<br>
        iptables -A INPUT -i </font><font color="#00FFFF"><font color="#FFFFFF"><font face="細明體">$EXTNIC</font></font></font><font color="#FFFFFF" face="細明體"> 
        -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP </font><font color="#FFFFFF"><font face="細明體"><br>
        </font></font><font color="#00FFFF"><font color="#FFFFFF"><br>
        <strong><font color="#00FFFF">#</font></strong> <strong><font color="#00FFFF" size="2">允許封包從<font color="#00FFFF"><font color="#FFFFFF"><strong><font color="#00FFFF">本機 
        (Local Loopback) </font></strong></font></font></font><font color="#00FFFF" size="2"><font color="#00FFFF"><font color="#FFFFFF"><strong><font color="#00FFFF" size="2">介面<font color="#00FFFF"><font color="#FFFFFF"><strong><font color="#00FFFF"><strong>及</strong></font></strong></font></font> 
        </font></strong></font><strong>NAT 內部介面</strong></font>進入</font></strong><br>
        </font><font color="#00FFFF"><font color="#FFFFFF"><font face="細明體">iptables 
        -A INPUT -i lo -j ACCEPT</font></font></font><font color="#FFFFFF"> <br>
        </font><font color="#00FFFF"><font color="#FFFFFF"><font face="細明體">iptables 
        -A INPUT -i $INNIC -j ACCEPT</font></font></font><font color="#FFFFFF"> 
        <br>
        <font face="細明體"><br>
        </font><font color="#00FFFF"><font color="#FFFFFF"><strong><font color="#00FFFF">#</font></strong> 
        </font></font><font color="#00FFFF" size="2"><strong>允許已建立及相關聯之連線</strong></font><font face="細明體"><br>
        iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT </font><br>
        <br>
        <font color="#00FFFF"><strong>#</strong></font><font color="#00FFFF" size="2"><strong> 
        對外開放 Web 及 Mail 服務：</strong></font><br>
        <font face="細明體">iptables -t nat -A PREROUTING -i </font><font color="#00FFFF"><font color="#FFFFFF" face="細明體">$EXTNIC</font></font><font face="細明體"> 
        -d 220.132.78.75 </font><font color="#00FFFF"><font color="#FFFFFF" face="細明體">-p 
        tcp</font></font><font color="#00FFFF"><font color="#FFFFFF" face="細明體"> 
        --dport</font></font><font face="細明體"> 80</font></font> <font color="#FFFFFF" face="細明體">\<br>
        　-j DNAT --to 192.168.1.1:80<br>
        iptables -t nat -A PREROUTING -i $EXTNIC -d 220.132.78.75 -p tcp</font><font color="#00FFFF"><font color="#FFFFFF" face="細明體"> 
        --dport</font></font><font color="#FFFFFF" face="細明體"> 25</font> <font color="#FFFFFF" face="細明體">\<br>
        　-j DNAT --to 192.168.1.2:25<br>
        iptables -t nat -A PREROUTING -i $EXTNIC -d </font><font color="#00FFFF"><font color="#FFFFFF" face="細明體">220.132.78.75 
        -p tcp</font></font><font color="#FFFFFF" face="細明體"> --dport 110</font> 
        <font color="#FFFFFF" face="細明體">\<br>
        　-j DNAT --to 192.168.1.2:110</font><font color="#FFFFFF"><br>
        <br>
        <font color="#00FFFF"><strong># </strong></font><font color="#00FFFF" size="2"><strong>對外開放 
        SSH 及 DNS 服務</strong></font><font face="細明體"><br>
        iptables -A INPUT -i </font><font color="#00FFFF"><font color="#FFFFFF" face="細明體">$EXTNIC</font></font><font face="細明體"> 
        -s 61.231.72.32 <font color="#00FFFF"><font color="#FFFFFF">-p tcp</font></font></font> 
        <font face="細明體">--dport 22 -j ACCEPT<br>
        iptables -A INPUT -i </font><font color="#00FFFF"><font color="#FFFFFF" face="細明體">$EXTNIC</font></font><font face="細明體"> 
        -p tcp --dport 53 -j ACCEPT<br>
        iptables -A INPUT -i </font><font color="#00FFFF"><font color="#FFFFFF" face="細明體">$EXTNIC</font></font><font face="細明體"> 
        -p udp --dport 53 -j ACCEPT</font></font></font><font color="#FFFFFF"><br>
        </font></p>
      </td>
  </tr>
</table>
<br>
　接著讓此 script 具有可執行權限：<br>
<br>
<table width="100%" border="0" bgcolor="#000000">
  <tr>
    <td height="25"><font color="#FFFFFF">suse:~ #<strong> <font color="#FFFF00">chmod 
      +x firewall.sh</font></strong></font></td>
  </tr>
</table>
<br>
　然後把這 script 的完整路徑寫入 boot.local 中：<br>
<br>
<table width="100%" border="0" bgcolor="#000000">
  <tr> 
    <td><font color="#FFFFFF">suse:~ # <strong><font color="#FFFF00">vi /etc/init.d/boot.local</font></strong><br>
      <br>
      /root/firewall.sh</font></td>
  </tr>
</table>
<br>
　最後執行 boot.local 或 firewall.sh 來啟動防火牆：<br>
<br>
<table width="100%" border="0" bgcolor="#000000">
  <tr> 
    <td><font color="#FFFFFF">suse:~ #<strong> <font color="#FFFF00">/etc/init.d/boot.local</font></strong><br>
      suse:~ #<strong> <font color="#FFFF00">./firewall.sh</font></strong></font></td>
  </tr>
</table>
<p> 　設定完成後，想想看這樣的規則有沒有符合我們的要求：</p>
<table width="100%" border="0">
  <tr> 
    <td width="2%">&nbsp;</td>
    <td width="3%" align="center"><img src="../picture/icon.jpg" tppabs="http://www.suse.url.tw/picture/icon.jpg" width="11" height="11"></td>
    <td width="95%"><strong><font color="#000099" size="4">外部存取內部的 Mail Server 
      時</font><font color="#000099">：</font></strong></td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td><table width="100%" border="0">
        <tr> 
          <td width="3%" align="center" valign="top" nowrap><font size="4">˙</font></td>
          <td width="97%"><p><strong>外部使用者透過此台郵件主機來寄信：</strong><br>
              假使外部使用者其 SMTP 及 POP3 伺服器都設定成 mail.paching.org，則當其要寄一封信給其他網域的使用者時，會先透過 
              DNS 解析出 mail.paching.org 的位址，然後再把信件交其處理。而 NAT 在收到這個由 dsl0 介面進入的封包後，發覺此封包的目的位址為 
              220.132.78.75、目的 port 為 25，所以經由 PREROUTING chain 時，會將此封包的 destination 
              socket 轉換成 192.168.1.2:25，轉換完畢後，由於其目的地已非本機，所以不會走 INPUT chain，而是走 
              FORWARD chain 再走 POSTROUTING chain 出去，剛好這兩個 chain 的 Policy 都為 ACCEPT，所以封包能順利送到 
              192.168.1.2 這台郵件主機上。再來因此信非屬於本地端的信件，所以此 MTA 會向 DNS 查詢負責這個網域的 MX 主機在哪，等查到後就能順利將此信件 
              Relay 出去囉，而在 Relay 的過程，會先經由 PREROUTING chain，接著走 FORWARD chain 再走 
              POSTROUTING chain 出去。</p></td>
        </tr>
        <tr> 
          <td align="center" valign="top" nowrap>&nbsp;</td>
          <td>&nbsp;</td>
        </tr>
        <tr> 
          <td align="center" valign="top" nowrap><font size="4">˙</font></td>
          <td><strong>外部使用者透過此台郵件主機來收信：</strong><br>
            外部使用者在收信時，一樣先經由 DNS 解析出 mail.paching.org 的位址，然後才能進行收信的動作。而 NAT 主機在收到這個由 
            dsl0 介面進入的封包後，發覺此封包的目的位址為 220.132.78.75、目的 port 為 110，所以經由 PREROUTING 
            chain 將此封包的 destination socket 轉換成 192.168.1.2:110，接著在經過路由判斷 --&gt; 
            FORWARD chain --&gt; POSTROUTING chain，然後抵達 192.168.1.2 這台郵件主機。再來就是郵件主機要送出回應封包了，當回應封包送至 
            NAT 時，NAT 會根據之前的連線紀錄再做一次轉換，然後送回給 Client： PREROUTING chain --&gt; FORWARD 
            chain --&gt; POSTROUTING chain。</td>
        </tr>
      </table></td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center"><img src="../picture/icon.jpg" tppabs="http://www.suse.url.tw/picture/icon.jpg" width="11" height="11"></td>
    <td><strong><font color="#000099" size="4">外部存取內部的 Apache 時：</font></strong></td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>外部使用者先經由 DNS 解析出 www.paching.org 的位址 (220.132.78.75)，然後向該 
      NAT 主機進行服務請求，接下來的過程與外部收信時類似，不再贅述。</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center"><img src="../picture/icon.jpg" tppabs="http://www.suse.url.tw/picture/icon.jpg" width="11" height="11"></td>
    <td><strong><font color="#000099" size="4">外部存取 SSH 時：</font></strong></td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>因這台 NAT 本身就是一台 SSH Server，所以當外部在對此台主機做遠端連線時，如封包的來源位址是 61.231.72.32，目的 
      port 是 22 port，那麼就會走 PREROUTING chain (由 dsl0 介面進入) 再走 INPUT chain 進入，而回應封包是走 
      OUTPUT chain 再走 POSTROUTING chain 出去。至於其它來源端要存取 SSH 服務時，則是會被拒絕。</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center"><img src="../picture/icon.jpg" tppabs="http://www.suse.url.tw/picture/icon.jpg" width="11" height="11"></td>
    <td><strong><font color="#000099" size="4">內部 Client 存取 Internet 的服務時：</font></strong></td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>Client 所存取的是 internet 上的服務，也就是封包的目的非本機，所以會走 PREROUTING --&gt; FORWARD 
      --&gt; POSTROUTING，剛好我們有制定一條 POSTROUTING chain 的 IP 偽裝規則，因而封包能順利出去 ; 而回應封包在進入主機時，也是先經過 
      PREROUTING chain，接著 NAT 會根據剛剛的連線對應記錄而知道要把目的位址轉為 Client 端的位址，因此接著封包並不會走 INPUT 
      chain，而是走 FORWARD chain 再走 POSTROUTING chain 來將封包回應給 Client。</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center"><img src="../picture/icon.jpg" tppabs="http://www.suse.url.tw/picture/icon.jpg" width="11" height="11"></td>
    <td><strong><font color="#000099" size="4">內部 Client 存取內部的服務時：</font></strong></td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td>由於我們所架設的 DNS，是使用 view 的功能來分別提供內外部的名稱查詢，因此內部 Client 在存取內部服務時都沒啥問題。以寄信來說，當 
      Client 要請 MTA 幫忙轉寄信件時，MTA 會先向 DNS 查詢目的網域的 MX 主機，查得後再把信件 Relay 出去，Relay 過程為 
      PREROUTING chain --&gt; FORWARD chain --&gt; POSTROUTING chain。 </td>
  </tr>
</table>
<div align="left"> 
  <p>　最後您要注意到這個範例中的 INPUT Policy 為 DROP，這樣的設定對初學者來說，會比較難以適應，因為需考慮到封包的去、回問題。舉個例子，如果在這個範例裡漏寫了『<font color="#00FFFF"><font color="#FFFFFF"><font color="#000000" face="細明體">iptables 
    -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</font></font></font>』這條規則，那麼 
    NAT 本機在主動對外連線時將發生問題，以瀏覽網頁來說，當封包送至對方主機後，NAT 需能接受對方的回應封包，不過很不幸的，因為 INPUT 政策是 
    DROP 的，因此回應封包自然就被丟棄了。<br>
    <br>
    　除此之外還會發生個問題，就是內網的 Client 將無法存取外部的服務。由於 NAT 本身也擔任 Local DNS，所以 Client 端都是向這台 
    DNS 做名稱的查詢，那接著遭遇的問題又跟上面的狀況一樣，當 Local DNS 在向外部 DNS 查詢時，外部 DNS 根本無法將結果回應給 Local 
    DNS，所以很自然的，內部的 Client 就無法存取外部的服務囉。<br>
    <br>
    　還有另一條規則『<font color="#00FFFF"><font color="#00FFFF"><font color="#FFFFFF"><font color="#000000" face="細明體">iptables 
    -A INPUT -i lo -j ACCEPT</font></font></font></font>』，如果這次您是漏寫了這條規則，那麼 NAT 
    本身將無法存取自己所提供的服務。<br>
    <br>
    　從這裡不難看出當 Policy 為 DROP 時，要非常仔細的設定一些需要讓封包放行的規則，因為需考慮到整個封包的流程及從哪個介面進出等。當然整個規劃也不是說非得要把 
    Policy 設 DROP 不可，還是有比較簡單的方式。就以這個範例來說，如果把 INPUT Policy 設為 ACCEPT，那麼只要在 INPUT 
    chain 的最後面補上一條規則即可：</p>
  <table width="100%" border="0">
    <tr> 
      <td height="28" bgcolor="#000000"><font color="#FFFFFF" face="細明體">iptables 
        -A INPUT -i <font color="#00FFFF"><font color="#FFFFFF">$EXTNIC</font></font> 
        -m state --state NEW,INVALID -j DROP</font></td>
    </tr>
  </table>
  <br>
  　其實以上這個防火牆的範例<font color="#000000">，並不是設得很嚴謹，因為我們只特別針對外部 dsl0 介面來設限，</font>對內的 
  eth0 介面則沒做什麼限制<font color="#000000">。當您信任網域內的使用者時，就可採用這種方式來設定，也就是所謂的網域不設防，但如果要對內做進一步的控管<em>，</em>則勢必要重新做調整囉。</font></div>
<p align="center">&nbsp;</p>
<p align="center"><font color="#000000"><em>copyright &copy; 2006 by barry ( 柏青哥 
  )</em></font> <br>
</p>
</body>
</html>
